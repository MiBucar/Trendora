@page "/products"
@inject IProductService _productService
@inject IItemTypeService _itemTypeService

<h2 style="text-align: center;">DISCOVER CATEGORIES</h2>

<div class="product-grid">
    <div class="product-item">
        <img src="/Images/clothing.png" />
        <div class="product-item__info">
            <h3>Clothing</h3>
        </div>
    </div>
    <div class="product-item">
        <img src="/Images/shoes.png" />
        <div class="product-item__info">
            <h3>Shoes</h3>
        </div>
    </div>
    <div class="product-item">
        <img src="/Images/accessories.png" />
        <div class="product-item__info">
            <h3>Accessories</h3>
        </div>
    </div>
</div>
<div class="product-more">
    <div class="product-more__container">
        <div class="product-more__item">
            <h2>THE WINTER MUST HAVES</h2>
            <p>Everything your wardrobe needs this season</p>
            <NavLink href="">
                <button>SHOP NEW ARRIVALS</button>
            </NavLink>
        </div>
        <img src="/Images/winter-arrivals.jpg" />
    </div>
</div>
<h2>Discover new clothes!</h2>
<div class="product-discover">
    @foreach(var itemType in ItemTypeListFour)
    {
        <div class="product-discover__item">
            <img src="@ImageData(itemType.Image)" />
            <div class="product-discover__item__info">
                <h3>@itemType.Model</h3>
            </div>
        </div>
    }    
</div>

@code {
    private IEnumerable<ProductDTO> ProductList = new List<ProductDTO>();
    private IEnumerable<ItemTypeDTO> ItemTypeListFour = new List<ItemTypeDTO>();
    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();
        ProductList = await _productService.GetAll();
        ItemTypeListFour = await _itemTypeService.GetRandom(4);
        IsLoading = false;
        StateHasChanged();
    }

    private string ImageData(byte[] image)
    {
        if (image != null && image.Length > 0)
        {
            var base64String = Convert.ToBase64String(image);
            return $"data:image/jpeg;base64,{base64String}";
        }
        return "";
    }
}
