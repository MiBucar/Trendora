@inject IItemTypeService _itemTypeService
@inject IImageService _imageService

@page "/categories/{Category}"

@if (!IsLoading)
{
    <div class="product-categories-main__container">
        <div class="product-categories_content__container">
            <div class="product-categories-title__container">
                <h3>@Category</h3>
            </div>
            @if (ItemTypes.Any())
            {
                <div class="section-container">
                    @foreach (var itemType in ItemTypes)
                    {
                        <a href="/categories/@Category/@itemType.Model" class="no-underline">
                            <div class="section-container__item">
                                <img src="@ImageData(itemType.Image)" />
                                <div class="card-cover" />
                                <h3 class="section-container__title">@itemType.Model</h3>
                            </div>
                        </a>
                    }
                </div>
            }
            else
            {
                <p class="component-header--no-items">Collection is Empty</p>
            }
        </div>
    </div>
}
else
{
    <_LoadingAnimation />
}

@code {
    [Parameter]
    public string Category { get; set; }

    private IEnumerable<ItemTypeDTO> ItemTypes { get; set; } = new List<ItemTypeDTO>(); 

    private bool IsLoading { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        StateHasChanged();

        var tempItemTypes = await _itemTypeService.GetAll();

        switch (Category)
        {
            case SD.Category_Accessories:
                ItemTypes = tempItemTypes.Where(x => x.IsAccessory);
                break;
            case SD.Category_Clothing:
                ItemTypes = tempItemTypes.Where(x => x.IsClothing);
                break;
            case SD.Category_Shoes:
                ItemTypes = tempItemTypes.Where(x => x.IsShoes);
                break;
        }

        IsLoading = false;
        StateHasChanged();
    }

    private string ImageData(byte[] image)
    {
        return _imageService.GetImage(image);
    }
}
