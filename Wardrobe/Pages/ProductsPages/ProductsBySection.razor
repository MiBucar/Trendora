@inject IItemTypeService _itemTypeService
@inject IImageService _imageService
@page "/products/{SelectedSection}"

@if (!IsLoading)
{
    <div class="product-section__main-container">
        <div class="product-section__content-container">
            <div class="product-section-title__container">
                <h3>@SelectedSection</h3>
            </div>
            <div class="section-container">
                @foreach (var itemType in ItemTypes)
                {
                    <a href=@($"/products/{SelectedSection}/{itemType.Model}") class="no-underline">
                        <div class="section-container__item">
                            <img src="@ImageData(itemType.Image)" />
                            <div class="card-cover" />
                            <h3 class="section-container__title">@itemType.Model</h3>
                        </div>
                    </a>
                }
            </div>
        </div>
    </div>
}
else
{
    <_LoadingAnimation></_LoadingAnimation>
}

@code {
    [Parameter]
    public string SelectedSection { get; set; }

    private IEnumerable<ItemTypeDTO> ItemTypes { get; set; } = new List<ItemTypeDTO>();

    private bool IsLoading { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        StateHasChanged();

        ItemTypes = await _itemTypeService.GetModelsBySection(SelectedSection);

        IsLoading = false;
        StateHasChanged();
    }

    private string ImageData(byte[] image)
    {
        return _imageService.GetImage(image);
    }
}
