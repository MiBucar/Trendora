@page "/products/{CollectionName}"
@inject IProductService _productService
@inject ICategoryService _itemTypeService
@inject IColorService _colorService
@inject ICollectionService _collectionService
@inject IJSRuntime JSRuntime

<h2 class="component-header">@CollectionName</h2>

@if (CollectionExists)
{
    @if (!IsLoading)
    {
        <_ProductFilter ProductList="@AllProducts" Collection="@Collection" OnFilterApplied="HandleFilterApplied" />

        @if (ProductList.Any())
        {
            @if (FilteredColors.Any())
            {
                <div class="tag-container">
                    @if (FilteredColors.Any())
                    {
                        foreach (var color in FilteredColors)
                        {
                            <div class="tag-container__item">
                                <p>@color</p>
                            </div>
                        }
                    }
                </div>
            }
            <div class="product-grid__container">
                <div class="product-grid">
                    @foreach (var product in ProductList)
                    {
                        <a href=@($"/product/{product.Name}/{product.IdGuid}") style="text-decoration:none;">
                            <_ProductItem Product="product"></_ProductItem>
                        </a>
                    }
                </div>
            </div>            
            @if (TotalPages > 1)
            {
                <div class="product-pages">
                    <button @onclick="LoadPreviousPage" disabled="@IsFirstPage" class="product-pages__button">Back</button>
                    <span>Page @CurrentPage of @TotalPages</span>
                    <button @onclick="LoadNextPage" disabled="@IsLastPage" class="product-pages__button">Next</button>
                </div>
            }
        }
        else
        {
            <p class="component-header--no-items">Collection is Empty</p>
        }
    }
    else
    {
        <_LoadingAnimation></_LoadingAnimation>
    }
}
else
{
    <div class="collection-none">
        <p>There are currently no products in this collection</p>
    </div>
}


@code {
    [Parameter]
    public string CollectionName { get; set; }

    [Parameter]
    public string SelectedSection { get; set; }

    [Parameter]
    public string ItemType { get; set; }

    private CollectionDTO Collection { get; set; } = new CollectionDTO();
    private IEnumerable<ProductDTO> ProductList { get; set; } = new List<ProductDTO>();
    private IEnumerable<ProductDTO> AllProducts { get; set; } = new List<ProductDTO>();
    private IEnumerable<string> FilteredColors { get; set; } = new List<string>();

    private int CurrentPage { get; set; } = 1;
    private int TotalPages { get; set; } = 1;
    private int ItemsPerPage { get; set; } = 24;

    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage >= TotalPages;
    private bool CollectionExists { get; set; }
    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CheckIfCollectionExists();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CollectionExists)
            await LoadProducts();
    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();

        Collection = await _collectionService.GetByName(CollectionName);
        AllProducts = await _productService.GetAllByCollection(Collection);
        (IEnumerable<ProductDTO> products, int totalCount) result;
        result = await _productService.GetByCollection(Collection, CurrentPage, ItemsPerPage);

        ProductList = result.products;
        TotalPages = (int)Math.Ceiling((double)result.totalCount / ItemsPerPage);

        IsLoading = false;
        StateHasChanged();
    }

    private async Task CheckIfCollectionExists()
    {
        var collections = await _collectionService.GetAll();

        if (collections.Where(x => x.Name == CollectionName).Any())
            CollectionExists = true;
    }

    private async Task LoadNextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
            await LoadProducts();
        }
    }

    private async Task LoadPreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
            await LoadProducts();
        }
    }

    private async void HandleFilterApplied(IEnumerable<ProductDTO> filteredProducts)
    {
        (IEnumerable<ProductDTO> products, int totalCount) result;
        result = await _productService.GetByCollectionAndProducts(filteredProducts, Collection, CurrentPage, ItemsPerPage);

        ProductList = result.products;
        TotalPages = (int)Math.Ceiling((double)result.totalCount / ItemsPerPage);

        StateHasChanged();
    }
}
