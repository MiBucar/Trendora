@page "/products/{Category}"
@page "/products/{Category}/{ItemType}"
@inject IProductService _productService
@inject IJSRuntime JSRuntime

<h2 class="component-header">@Title.ToUpper()</h2>
@if (!String.IsNullOrEmpty(ItemType))
{
    <h3 class="component-header-2">@ItemType.ToUpper()</h3>
}

@if (!IsLoading)
{ 
    @if (ProductList.Any())
    {
        <_ProductFilter ProductList="@StartingList" Category="@Category" OnFilterApplied="HandleFilterApplied"></_ProductFilter>
        <div class="product-grid">
            @foreach (var product in ProductList)
            {
                <a href=@($"/product/{product.Name}/{product.IdGuid}") style="text-decoration:none;">
                    <_ProductItem Product="product"></_ProductItem>
                </a>
            }
        </div>
        <div class="product-pages">
            <button @onclick="LoadPreviousPage" disabled="@IsFirstPage" class="product-pages__button">Back</button>
            <span>Page @CurrentPage of @TotalPages</span>
            <button @onclick="LoadNextPage" disabled="@IsLastPage" class="product-pages__button">Next</button>
        </div>
    }
    else
    {
        <p class="component-header--no-items">No Items To Display</p>
    }
}
else
{
    <_LoadingAnimation></_LoadingAnimation>
}


@code {
    [Parameter]
    public string Category { get; set; }

    [Parameter]
    public string ItemType { get; set; }

    private IEnumerable<ProductDTO> ProductList { get; set; } = new List<ProductDTO>();
    private IEnumerable<ProductDTO> StartingList { get; set; } = new List<ProductDTO>();
    private string Title { get; set; }

    private int CurrentPage { get; set; } = 1;
    private int TotalPages { get; set; } = 1;
    private int ItemsPerPage { get; set; } = 25;

    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage >= TotalPages;

    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();

        Title = Category;
        (IEnumerable<ProductDTO> products, int totalCount) result;
        if (!String.IsNullOrEmpty(ItemType))
        {
            result = await _productService.GetByItemType(ItemType, CurrentPage, ItemsPerPage);
        }
        else
        {
            result = await _productService.GetByCategory(Category, CurrentPage, ItemsPerPage);
        }
        ProductList = result.products;
        StartingList = result.products;
        TotalPages = (int)Math.Ceiling((double)result.totalCount / ItemsPerPage);

        IsLoading = false;
        StateHasChanged();
    }

    private async Task LoadNextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
            await LoadProducts();
        }
    }

    private async Task LoadPreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
            await LoadProducts();
        }
    }

    private void HandleFilterApplied(IEnumerable<ProductDTO> filteredProducts)
    {
        ProductList = filteredProducts;
        StateHasChanged();
    }
}
