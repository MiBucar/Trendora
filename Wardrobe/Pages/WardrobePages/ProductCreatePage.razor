@page "/wardrobe/create"
@page "/wardrobe/create/{Id:int}"
@inject IApplicationUserService _appUserService
@inject NavigationManager _navigationManager
@inject IProductService _productService
@inject ICategoryService _itemTypeService
@inject IColorService _colorService
@inject IImageService _imageService
@inject ITagService _tagService
@inject IGenderService _genderService

<div class="product-create-main__container">
    <div class="product-create_content__container">
        <div class="product-create-title__container">
            <h3>@Title Product</h3>
        </div>
    </div>
</div>

<div>
    @if (IsLoading)
    {
        <_LoadingAnimation />
    }
    else
    {
        <EditForm Model="Product" OnValidSubmit="@Submit">
            <DataAnnotationsValidator />
            <div class="form">
                <!-- Name -->
                <div class="input-container">
                    <p class="input-container--text">Item Name</p>
                    <InputText @bind-Value="Product.Name" class="item-container__input" placeholder="Enter name..."></InputText>
                    <ValidationMessage For="() => Product.Name" />
                </div>
                <!-- Descrption -->
                <div class="input-container">
                    <p class="input-container--text">Item Description</p>
                    <InputTextArea @bind-Value="Product.Description" class="item-container__input" placeholder="Enter text..."></InputTextArea>
                </div>
                <!-- Genders -->
                <div class="input-container">
                    <RadzenLabel Text="Select Gender" Component="DropDownSection" />
                    <RadzenDropDown Placeholder="Select" @bind-Value=@Product.GenderId Data=@AvailableGenders ValueProperty="Id"
                                    TextProperty="Name" Name="DropDownSection" />
                    <ValidationMessage For="() => Product.GenderId" />
                </div>
                <!-- Category -->
                <div class="input-container">
                    <RadzenLabel Text="Select Category" Component="DropDownItemType" />
                    <RadzenDropDown Placeholder="Select" @bind-Value=@Product.CategoryId Data=@Categories ValueProperty="ItemTypeId"
                                    TextProperty="Name" Name="DropDownItemType" Change="@(() => OnCategoryChanged(Product.CategoryId))" />
                    <ValidationMessage For="() => Product.CategoryId" />
                </div>
                <!-- Tags -->
                <div class="input-container">
                    <RadzenLabel Text="Select Tags" Component="DropDownSection" />
                    <RadzenDropDown @bind-Value=@Product.SelectedTags Data=@TagModels Chips=true TextProperty="Title"
                                    Multiple=true AllowClear=false Placeholder="Select" />
                </div>
                <ValidationMessage For="() => Product.SelectedTags" />
                <!-- Price -->
                <div class="input-container">
                    <p class="input-container--text">Item Price €</p>
                    <InputNumber @bind-Value="Product.Price" class="item-container__input"></InputNumber>
                </div>
                <!-- Available colors -->
                <div class="input-container">
                    @if (ColorModels.Any())
                    {
                        <p class="input-container--text">Available Colors</p>
                        <div class="input-container--wrap">
                            @foreach (var color in ColorModels)
                            {
                                @if (!Product.SelectedColors.Any(x => x.Id == color.Id))
                                {
                                    <div @onclick="() => AddColorToProduct(color)" class="color-container" style="background-color: @color.ColorCode;"></div>
                                }
                            }
                        </div>
                    }
                    <ValidationMessage For="() => Product.SelectedColors" />
                </div>
                <!-- Selected colors -->
                <div class="input-container">
                    <p class="input-container--text">Selected Colors</p>
                    <div class="input-container--wrap">
                        @if (Id != 0)
                        {
                            @foreach (var color in Product.Colors)
                            {
                                <div @onclick="() => RemoveColorFromProduct(color)" class="color-container" style="background-color: @color.ColorCode;"></div>
                            }
                        }
                        else
                        {
                            @if (Product.SelectedColors.Any())
                            {
                                @foreach (var color in Product.SelectedColors)
                                {
                                    <div @onclick="() => RemoveColorFromProduct(color)" class="color-container" style="background-color: @color.ColorCode;"></div>
                                }
                            }
                        }
                    </div>
                </div>
                <!-- Sizes -->
                <div class="input-container">
                    <p class="input-container--text">Sizes</p>
                    @if (Product.CategoryId != 0)
                    {
                        @if (ItemType != null && ItemType.Sizes != null)
                        {
                            <div class="input-container--wrap">
                                @foreach (var size in ItemType.Sizes)
                                {
                                    <div class="input-container__size-box">
                                        <label>@size.ItemSize</label>
                                    </div>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <p style="margin: 0px;">Select a category</p>
                    }
                </div>
                <!-- Image upload -->
                <div class="input-container">
                    <p class="input-container--text">Image Upload</p>
                    <InputFile OnChange="@HandleFileUpload" class="item-container__input" />
                    <ValidationMessage For="() => Product.ImageData" />
                </div>
                <!-- Image -->
                @if (Product.ImageData != null)
                {
                    if (Product.ImageData.Any())
                    {
                        <div class="input-container">
                            <div class="input-container__text-container">
                                <p class="input-container--text">Image</p>
                            </div>                             
                            <img src="@ImageData(Product.ImageData)" class="input-container--image" />
                        </div>
                    }
                }
            </div>
            <div class="end-buttons">
                @if (IsAdmin)
                {
                    <button type="submit" class="btn-form btn-form--submit">Submit</button>
                }
                else
                {
                    <button type="button" class="btn-form btn-form--submit">Submit</button>
                }
                <NavLink href="/wardrobe"><button class="btn-form btn-form--cancel">Cancel</button></NavLink>

            </div>            
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Title { get; set; } = "Create";
    private bool IsLoading { get; set; }
    private bool IsAdmin { get; set; }

    private ProductDTO Product { get; set; } = new ProductDTO() { Colors = new List<ColorDTO>() };
    private CategoryDTO ItemType { get; set; } = new CategoryDTO();
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private IEnumerable<ColorDTO> ColorModels { get; set; } = new List<ColorDTO>();
    private IEnumerable<TagDTO> TagModels { get; set; } = new List<TagDTO>();
    private IEnumerable<GenderDTO> AvailableGenders { get; set; } = new List<GenderDTO>();

    private async Task Submit()
    {
        Product.Colors = Product.SelectedColors;
        Product.Tags = Product.SelectedTags;
        if (Id == 0)
        {
            await _productService.Create(Product);
        }
        else
        {
            await _productService.Update(Product);
        }
        _navigationManager.NavigateTo("/wardrobe");
    }

    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;
        StateHasChanged();

        IsAdmin = await _appUserService.IsUserAdmin();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadItem();
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadItem()
    {
        Product.SelectedColors = new List<ColorDTO>();
        Product.SelectedTags = new List<TagDTO>() {};
        Categories = await _itemTypeService.GetAll();
        AvailableGenders = await _genderService.GetAll();
        TagModels = await _tagService.GetAllTags();
        Product.SelectedTags.Add(TagModels.FirstOrDefault(x => x.Title == SD.Tag_None));
        ColorModels = await _colorService.GetAll();
        if (Id != 0)
        {
            Product = await _productService.GetById(Id);
            ItemType = await _itemTypeService.GetById(Product.CategoryId);
            Product.SelectedColors = Product.Colors;
            Product.SelectedTags = Product.Tags;
            Title = "Update";
        }
    }

    private async Task OnCategoryChanged(int selectedId)
    {
        Product.CategoryId = selectedId;
        ItemType = await _itemTypeService.GetById(selectedId);
        StateHasChanged();
    }

    private void AddColorToProduct(ColorDTO color)
    {
        Product.SelectedColors.Add(color);
        StateHasChanged();
    }

    private void RemoveColorFromProduct(ColorDTO color)
    {
        Product.SelectedColors.Remove(color);
        StateHasChanged();
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        if (imageFile != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await imageFile.OpenReadStream().CopyToAsync(memoryStream);
                Product.ImageData = memoryStream.ToArray();
            }
        }
    }

    private string ImageData(byte[] image)
    {
        return _imageService.GetImage(image);
    }
}
