@page "/wardrobe/create"
@page "/wardrobe/create/{Id:int}"

@inject NavigationManager _navigationManager
@inject IProductService _productService
@inject IItemTypeService _itemTypeService
@inject IColorService _colorService
@inject IImageService _imageService
@inject ITagService _tagService
@attribute [Authorize(Roles = SD.Role_Admin)]

<div>
    <h2>@Title Product</h2>
</div>

<div>
    @if (IsLoading)
    {
        <div class="loadingio-spinner-ripple-kzrhxmj307">
            <div class="ldio-i6ylih2ekth">
                <div></div><div></div>
            </div>
        </div>
    }
    else
    {
        <EditForm Model="Product" OnValidSubmit="@Submit">
            <DataAnnotationsValidator />
            <div class="form">
                <!-- Name -->
                <div class="input-container">
                    <p class="input-container--text">Item Name</p>
                    <InputText @bind-Value="Product.Name" class="item-container__input" placeholder="Enter name..."></InputText>
                    <ValidationMessage For="() => Product.Name" />
                </div>
                <!-- Descrption -->
                <div class="input-container">
                    <p class="input-container--text">Item Description</p>
                    <InputTextArea @bind-Value="Product.Description" class="item-container__input" placeholder="Enter text..."></InputTextArea>
                </div>
                <!-- Section -->                
                <div class="input-container">
                    <RadzenLabel Text="Select Section" Component="DropDownSection" />
                    <RadzenDropDown Placeholder="Select" @bind-Value=@Product.Section Data=@AvailableSections Name="DropDownSection" />
                </div
                <!-- Tags -->                
                <div class="input-container">
                    <RadzenLabel Text="Select Tags" Component="DropDownSection" />
                    <RadzenDropDown @bind-Value=@SelectedTags Data=@TagModels Chips=true TextProperty="Title"
                                    Multiple=true AllowClear=false Placeholder="Select" />
                </div>
                <!-- Item Type-->
                <div class="input-container">
                    @* <p class="input-container--text">Item Type</p>
                    <InputSelect Value="Product.ItemTypeModelId"
                                 ValueChanged="@(async (int newValue) => await OnItemTypeChanged(newValue))"
                                 ValueExpression="@(() => Product.ItemTypeModelId)" class="item-container__input">
                        @if (ItemTypeModels.Any())
                        {
                            @foreach (var itemType in ItemTypeModels)
                            {
                                <option value="@itemType.ItemTypeId">@itemType.Model</option>
                            }
                        }
                    </InputSelect> *@
                    <RadzenLabel Text="Select Item Type" Component="DropDownItemType" />
                    <RadzenDropDown Placeholder="Select" @bind-Value=@Product.ItemTypeModelId Data=@ItemTypeModels ValueProperty="ItemTypeId"
                                    TextProperty="Model" Name="DropDownItemType" Change="@(() => OnItemTypeChanged(Product.ItemTypeModelId))" />
                    <ValidationMessage For="() => Product.ItemTypeModelId" />
                </div>
                <!-- Price -->
                <div class="input-container">
                    <p class="input-container--text">Item Price €</p>
                    <InputNumber @bind-Value="Product.Price" class="item-container__input"></InputNumber>
                </div>
                <!-- Available colors -->
                <div class="input-container">
                    @if (ColorModels.Any())
                    {
                        <p class="input-container--text" >Available Colors</p>
                        <div class="input-container--wrap">
                                @foreach (var color in ColorModels)
                                {
                                    @if (!Product.Colors.Any(x => x.Id == color.Id))
                                    {
                                        <div @onclick="() => AddColorToProduct(color)" class="color-container" style="background-color: @color.ColorCode;"></div>
                                    }
                                }                                                       
                        </div>
                    }
                </div>
                <!-- Selected colors -->
                <div class="input-container">
                    <p class="input-container--text">Selected Colors</p>
                    <div class="input-container--wrap">
                        @if (Id != 0)
                        {
                            @foreach (var color in Product.Colors)
                            {
                                <div @onclick="() => RemoveColorFromProduct(color)" class="color-container" style="background-color: @color.ColorCode;"></div>
                            }
                        }
                        else
                        {
                            @foreach (var color in SelectedColors)
                            {
                                <div @onclick="() => RemoveColorFromProduct(color)" class="color-container" style="background-color: @color.ColorCode;"></div>
                            }
                        }
                    </div>
                </div>
                <!-- Sizes -->
                <div class="input-container">
                    <p class="input-container--text" style="margin-bottom: -10px;">Sizes</p>
                    @if (Product.ItemTypeModelId != 0)
                    {
                        @if (ItemType != null && ItemType.Sizes != null)
                        {
                            <div class="input-container--wrap">
                                @foreach (var size in ItemType.Sizes)
                                {
                                    <div class="input-container__size-box">
                                        <label>@size.ItemSize</label>
                                    </div>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <p style="margin: 0px;">Select an item type</p>
                    }
                </div>
                <!-- Image upload -->
                <div class="input-container">
                    <p class="input-container--text">Image Upload</p>
                    <InputFile OnChange="@HandleFileUpload" class="item-container__input" />
                </div>
                <!-- Image -->
                @if (Product.ImageData != null)
                {
                    if (Product.ImageData.Any())
                    {
                            <div class="input-container">
                                <p class="input-container--text">Image</p>
                            <img src="@ImageData(Product.ImageData)" class="input-container--image" />
                            </div>
                    }                    
                }                
            </div>
            <button type="submit" class="btn-form btn-form--submit">Submit</button>
            <NavLink href="/wardrobe"><button class="btn-form btn-form--cancel">Cancel</button></NavLink>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Title { get; set; } = "Create";
    private bool IsLoading { get; set; }

    private ProductDTO Product { get; set; } = new ProductDTO() { Colors = new List<ColorDTO>()};
    private ItemTypeDTO ItemType { get; set; } = new ItemTypeDTO();
    private IEnumerable<ItemTypeDTO> ItemTypeModels { get; set; } = new List<ItemTypeDTO>();
    private IEnumerable<ColorDTO> ColorModels { get; set; } = new List<ColorDTO>();
    private IEnumerable<TagDTO> TagModels { get; set; } = new List<TagDTO>();
    private List<ColorDTO> SelectedColors { get; set; } = new List<ColorDTO>();
    private List<TagDTO> SelectedTags { get; set; } = new List<TagDTO>();
    private List<string> AvailableSections { get; set; } = new List<string>();

    private async Task Submit()
    {
        Product.Colors = SelectedColors;
        Product.Tags = SelectedTags;
        if (Id == 0)
        {
            await _productService.Create(Product);
        }
        else
        {
            await _productService.Update(Product);
        }
        _navigationManager.NavigateTo("/wardrobe");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadItem();
        LoadAvailableSections();
    }

    private void LoadAvailableSections()
    {
        AvailableSections = new List<string>()
        {
            SD.Section_Kids,
            SD.Section_Men,
            SD.Section_Women
        };
    }

    private async Task LoadItem()
    {
        IsLoading = true;
        StateHasChanged();
        ItemTypeModels = await _itemTypeService.GetAll();
        TagModels = await _tagService.GetAllTags();
        ColorModels = await _colorService.GetAll();
        if (Id != 0)
        {
            Product = await _productService.GetById(Id);
            ItemType = await _itemTypeService.GetById(Product.ItemTypeModelId);
            SelectedColors = Product.Colors;
            Title = "Update";
        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task OnItemTypeChanged(int selectedId)
    {
        Product.ItemTypeModelId = selectedId;
        ItemType = await _itemTypeService.GetById(selectedId);
        StateHasChanged();
    }

    private void AddColorToProduct(ColorDTO color)
    {
        SelectedColors.Add(color); 
        StateHasChanged();
    }

    private void RemoveColorFromProduct(ColorDTO color)
    {
        SelectedColors.Remove(color);
        StateHasChanged();
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        if (imageFile != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await imageFile.OpenReadStream().CopyToAsync(memoryStream);
                Product.ImageData = memoryStream.ToArray();
            }
        }
    }

    private string ImageData(byte[] image)
    {
        return _imageService.GetImage(image);
    }
}
