@page "/wardrobe/create"
@page "/wardrobe/create/{Id:int}"

@inject NavigationManager _navigationManager
@inject IWardrobeService _wardrobeService

<div>
    <h2>@Title Item</h2>
</div>

<div>
    @if (IsLoading)
    {
        <div class="loadingio-spinner-blocks-49enh9aem">
            <div class="ldio-4kmgy2v2hm7">
                <div style='left:25.919999999999998px;top:25.919999999999998px;animation-delay:0s'></div><div style='left:57.599999999999994px;top:25.919999999999998px;animation-delay:0.32894736842105265s'></div><div style='left:89.28px;top:25.919999999999998px;animation-delay:0.6578947368421053s'></div><div style='left:25.919999999999998px;top:57.599999999999994px;animation-delay:2.3026315789473686s'></div><div style='left:89.28px;top:57.599999999999994px;animation-delay:0.9868421052631579s'></div><div style='left:25.919999999999998px;top:89.28px;animation-delay:1.9736842105263157s'></div><div style='left:57.599999999999994px;top:89.28px;animation-delay:1.644736842105263s'></div><div style='left:89.28px;top:89.28px;animation-delay:1.3157894736842106s'></div>
            </div>
        </div>
    }
    else
    {
        <EditForm Model="WardrobeItem" OnValidSubmit="@Submit">
            <DataAnnotationsValidator />
            <div class="form">
                <div class="input-container">
                    <p class="input-container--text">Item Color</p>
                    <InputText @bind-Value="WardrobeItem.Color" class="input-container--content" placeholder="Enter text...">test</InputText>
                </div>
                <div class="input-container">
                    <p class="input-container--text">Item Type</p>
                    <InputText @bind-Value="WardrobeItem.ItemType" class="input-container--content" placeholder="Enter text..."></InputText>
                </div>
                <div class="input-container">
                    <p class="input-container--text">Item Price €</p>
                    <InputNumber @bind-Value="WardrobeItem.Price" class="input-container--content"></InputNumber>
                </div>
                <div class="input-container">
                    <p class="input-container--text">Image Upload</p>
                    <InputFile OnChange="@HandleFileUpload" class="input-container--content" />
                </div>
                <div class="input-container">
                    <p class="input-container--text">Image</p>
                    <img src="@ImageData()" class="input-container--image"/>
                </div>
            </div>
            <ValidationMessage For="() => WardrobeItem.Color" />
            <ValidationMessage For="() => WardrobeItem.ItemType" />
            <button type="submit" class="btn-form btn-form--submit">Submit</button>
            <NavLink href="/wardrobe"><button class="btn-form btn-form--cancel">Cancel</button></NavLink>
        </EditForm>
    }    
</div>

<style>
    .input-container--content {
        border: none;
        background-color: #dddddd;
        padding: 5px;
        border-radius: 3px;
    }
</style>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Title { get; set; } = "Create";
    private bool IsLoading { get; set; }

    private WardrobeDTO WardrobeItem { get; set; } = new WardrobeDTO(); 

    private async Task Submit()
    {
        if (Id == 0)
        {
            Console.WriteLine("Image Data is " + WardrobeItem.ImageData);
            await _wardrobeService.Create(WardrobeItem);
        }
        else
        {
            await _wardrobeService.Update(WardrobeItem);
        }
        _navigationManager.NavigateTo("/wardrobe");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine(WardrobeItem.ImageData);
        if (firstRender)
        {
            if (Id == 0)
            {
                IsLoading = false;
            }
            else
            {
                Title = "Update";
                await LoadItem();
            }
        }
    }

    private async Task LoadItem()
    {
        IsLoading = true;
        StateHasChanged();
        WardrobeItem = await _wardrobeService.GetById(Id);
        IsLoading = false;
        StateHasChanged();
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        if (imageFile != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await imageFile.OpenReadStream().CopyToAsync(memoryStream);
                WardrobeItem.ImageData = memoryStream.ToArray();
            }
        }
    }

    private string ImageData()
    {
        if (WardrobeItem.ImageData != null && WardrobeItem.ImageData.Length > 0)
        {
            var base64String = Convert.ToBase64String(WardrobeItem.ImageData);
            return $"data:image/jpeg;base64,{base64String}";
        }
        return "";
    }
}
