@page "/create/categories"
@inject IApplicationUserService _appUserService
@inject ICategoryService _itemTypeService
@inject ISizeService _sizeService
@inject IJSRuntime _jsRuntime
@inject IImageService _imageService

<div class="category-main__container">
    <div class="category_content__container">
        <div class="category-title__container">
            <h3>Create Category</h3>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="toast-container p-3 popup-container" data-bs-autohide="true" data-bs-delay="5000" style="z-index: 10;">
        <div class="toast show popup-container__content" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <div style="display: flex; align-items: center;">
                    @if (ShowingEditControls)
                    {
                        @if (!IsEditingHeaderText)
                        {
                            <h5 style="margin: 0;">@HeaderText</h5>
                            @if (IsAdmin)
                            {
                                <div @onclick="StartEditingHeaderText" class="popup-container__edit-name"></div>
                            }
                            else
                            {
                                <div class="popup-container__edit-name"></div>
                            }
                        }
                        else
                        {
                            <EditForm Model="ShownTypeModel" OnValidSubmit="SaveEditingHeaderText" @onfocusout="@(() => SaveEditingHeaderText())">
                                <DataAnnotationsValidator />
                                <div class="item-property--card-1">
                                    <input @bind-value="ShownTypeModel.Name" class="item-container__input no-focus-outline input-for-focus" style="width: 50%;" placeholder="Rename..."></input>
                                </div>
                                <ValidationMessage For="() => ShownTypeModel.Name" />
                            </EditForm>
                        }
                    }
                    @if (ShowingItemTypeImage)
                    {
                        <h5 style="margin: 0;">@HeaderText</h5>
                    }
                </div>
                <button type="button" class="btn-close" aria-label="Close" @onclick="ClosePopup"></button>
            </div>

            <div class="toast-body popup-container__body">
                <div style="display: flex; align-items: center; flex-wrap: wrap;">
                    @if (ShowingEditControls)
                    {
                        @foreach (var size in ShownTypeModel.Sizes)
                        {
                            <div class="size-container">
                                <span style="margin: 1px 3px 0px 2px;">@size.ItemSize</span>
                                @if (IsAdmin)
                                {
                                    <div @onclick="() => RemoveExistingSize(size)" class="size-container__image"></div>
                                }
                                else
                                {
                                    <div class="size-container__image"></div>
                                }
                            </div>
                        }
                        @if (!IsEditingExistingSize)
                        {
                            <div class="size-container size-container--light">
                                @if (IsAdmin)
                                {
                                    <div @onclick="StartEditingExistingSizes" class="size-container__image--add"></div>
                                }
                                else
                                {
                                    <div class="size-container__image--add"></div>
                                }
                            </div>
                        }
                        else
                        {
                            <EditForm Model="ShownTypeModel" OnValidSubmit="SaveEditingExistingSizes" @onfocusout="@(() => StopEditingExistingSizes())">
                                <DataAnnotationsValidator />
                                <input @bind-value="SizeModel.ItemSize" class="item-container__input no-focus-outline input-for-focus-2" placeholder="Add new Size" style="padding: 3px 5px 3px 5px; margin-right: 10px; margin-top: 5px; width: 54%;"></input>
                                <ValidationMessage For="() => ShownTypeModel.Name" />
                            </EditForm>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}


<div class="item-container--item-page">
    <!-- Create New Model Type -->
    <div class="item-container__card">
        <div style=" height: 100%;">
            <EditForm Model="ItemTypeModel" OnValidSubmit="@CreateItemType">
                <DataAnnotationsValidator />
                <div style="text-align:left;">
                    <label>Category Name</label>
                </div>
                <div class="item-container__property">
                    <InputText @bind-Value="ItemTypeModel.Name" class="item-container__input" placeholder="Enter new model type..."></InputText>
                </div>
                <ValidationMessage For="() => ItemTypeModel.Name" />
                <!-- Adding sizes -->
                <div style="text-align:left;">
                    <label>Category Size</label>
                </div>
                <div class="item-container__property">
                    <InputText @bind-Value="NewSizeValue" class="item-container__input" placeholder="Enter new size..."></InputText>
                    <button @onclick="@AddNewSize" class="btn-form btn-form--submit btn-plus" style="margin-left: 5px;" type="button"></button>
                </div>
                <!-- Shown Sizes -->
                @if (AvailableSizes.Any())
                {
                    <div style="text-align:left;">
                        <label>Created Sizes</label>
                    </div>
                    <div style="margin-bottom: 10px; display: flex; align-items: center; flex-wrap: wrap;">
                        @foreach (var size in AvailableSizes)
                        {
                            <div class="size-container">
                                <span style="margin: 1px 3px 0px 2px;">@size.ItemSize</span>
                                <div @onclick="() => RemoveAvailableSize(size)" class="size-container__image"></div>
                            </div>
                        }
                    </div>
                }
                <!-- Create Button -->
                <div class="button-container">
                    @if (IsAdmin)
                    {
                        <button type="submit" class="btn-form btn-form--submit">Create</button>
                    }
                    else
                    {
                        <button type="button" class="btn-form btn-form--submit">Create</button>
                    }
                    @if (AvailableSizes.Any())
                    {
                        <button @onclick="@DeleteAvailableSizes" type="button" class="btn-form btn-form--cancel" style="margin-left: 5px;">Delete sizes</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
    <!-- List of Model Types -->
    <div class="item-container__card item-container__card--fixed-height">
        @if (ItemTypeModelList.Any())
        {
            <div class="item-container__row item-container__row--info">
                <div class="item-container__property" style="font-weight: 700;">Model Type</div>
                <div class="item-container__property">Sizes</div>
                <div class="item-container__property">Action</div>
            </div>
            @foreach (var model in ItemTypeModelList)
            {
                <div class="item-container__row item-container__row--content">
                    <!-- Type Name -->
                    <div class="item-container__property">@model.Name</div>
                    <!-- Sizes -->
                    <div class="item-container__property">
                        @if (model.Sizes.Any())
                        {
                            if (model.Sizes.Count >= 4)
                            {
                                @for (int i = 0; i < 4; i++)
                                {
                                    <span style="margin-right: 5px;">@model.Sizes[i].ItemSize</span>
                                }
                                <span>...</span>
                            }
                            else
                            {
                                @foreach (var size in model.Sizes)
                                {
                                    <span style="margin-right: 5px;">@size.ItemSize</span>
                                }
                            }
                        }
                        else
                        {
                            <span>None</span>
                        }
                    </div>
                    <!-- Buttons -->
                    <div class="item-container__property">
                        <button class="btn-form btn-form--submit" style="margin-right: 2px;" @onclick="() => ShowEditControls(model.ItemTypeId)">Edit</button>
                        @if (IsAdmin)
                        {
                            <button class="btn-form btn-form--cancel" style="margin-left: 2px;" @onclick="() => DeleteModel(model.ItemTypeId)">Delete</button>
                        }
                        else
                        {
                            <button class="btn-form btn-form--cancel" style="margin-left: 2px;">Delete</button>
                        }
                    </div>
                </div>

            }
        }
        else
        {
            if (IsLoading)
            {
                <div class="loadingio-spinner-ripple-kzrhxmj307">
                    <div class="ldio-i6ylih2ekth">
                        <div></div><div></div>
                    </div>
                </div>
            }
            else
            {
                <div style="display: flex; justify-content: center; align-items: center; height: 100%;">
                    <p>Nothing to show</p>
                </div>
            }
        }
    </div>
</div>

<style>
    .no-focus-outline:focus {
        outline: none !important;
    }


    .custom-file-input::file-selector-button {
        background-color: var(--color-primary) !important;
        color: white;
        border-radius: 2px;
        border: none;
        padding: 5px;
        transition: .5s ease;
        cursor: pointer;
    }

        .custom-file-input::file-selector-button:hover {
            background-color: var(--color-primary-light) !important;
        }
</style>

@code {
    [Parameter]
    public int Id { get; set; }

    private bool IsLoading { get; set; }
    private bool IsLoadingImage { get; set; }

    private CategoryDTO ItemTypeModel { get; set; } = new CategoryDTO();
    private CategoryDTO ShownTypeModel { get; set; } = new CategoryDTO();
    private SizeDTO SizeModel { get; set; } = new SizeDTO();
    private IEnumerable<CategoryDTO> ItemTypeModelList { get; set; } = new List<CategoryDTO>();
    private IEnumerable<SizeDTO> ItemSizeList { get; set; } = new List<SizeDTO>();

    private string NewSizeValue { get; set; } = "";
    private List<SizeDTO> AvailableSizes { get; set; } = new List<SizeDTO>() { };

    private bool ShowingItemTypeImage { get; set; }
    private bool ShowingEditControls { get; set; }

    private bool IsAdmin { get; set; }

    private void AddNewSize()
    {
        if (NewSizeValue.Length > 0)
        {
            AvailableSizes.Add(new SizeDTO() { ItemSize = NewSizeValue, IsAvailable = true });
        }
        NewSizeValue = "";
    }

    private void RemoveAvailableSize(SizeDTO sizeToRemove)
    {
        AvailableSizes.Remove(sizeToRemove);
    }

    private async Task RemoveExistingSize(SizeDTO sizeToRemove)
    {
        await _sizeService.Delete(sizeToRemove);
        ShownTypeModel = await _itemTypeService.GetById(ShownTypeModel.ItemTypeId);
        ItemTypeModelList = await _itemTypeService.GetAll();
        ItemSizeList = await _sizeService.GetAll();
        StateHasChanged();
    }

    private void DeleteAvailableSizes()
    {
        AvailableSizes = new List<SizeDTO>() { };
    }

    protected override async Task OnInitializedAsync()
    {
        IsAdmin = await _appUserService.IsUserAdmin();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadItemTypes();
        }
    }

    private async Task LoadItemTypes()
    {
        IsLoading = true;
        StateHasChanged();
        ItemSizeList = await _sizeService.GetAll();
        ItemTypeModelList = await _itemTypeService.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task CreateItemType()
    {
        var newModel = await _itemTypeService.Create(ItemTypeModel);

        foreach (var size in AvailableSizes)
        {
            await _sizeService.Create(size, newModel.ItemTypeId);
        }

        AvailableSizes = new List<SizeDTO>();
        ItemTypeModelList = await _itemTypeService.GetAll();
        StateHasChanged();
        ItemTypeModel = new CategoryDTO();
    }

    private async Task DeleteModel(int id)
    {
        await _itemTypeService.Delete(id);
        await LoadItemTypes();
        StateHasChanged();
    }

    [Parameter]
    public bool IsVisible { get; set; } = false;

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    public async void ShowEditControls(int id)
    {
        ShownTypeModel = await _itemTypeService.GetById(id);
        ShowingEditControls = true;
        ShowingItemTypeImage = false;
        HeaderText = ShownTypeModel.Name;
        IsVisible = true;
        StateHasChanged();
    }

    public async void ShowItemImage(int id)
    {
        ShownTypeModel = await _itemTypeService.GetById(id);
        ShowingEditControls = false;
        ShowingItemTypeImage = true;
        HeaderText = $"{ShownTypeModel.Name} Image";
        IsVisible = true;
        StateHasChanged();
    }

    private void ClosePopup()
    {
        HeaderText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }

    private bool IsEditingHeaderText = false;
    private bool IsEditingExistingSize = false;

    private async Task StartEditingHeaderText()
    {
        IsEditingHeaderText = true;
        await _jsRuntime.InvokeVoidAsync("focusInputText", ".input-for-focus");
    }

    private async Task SaveEditingHeaderText()
    {
        await _itemTypeService.Update(ShownTypeModel);
        HeaderText = ShownTypeModel.Name;
        ItemTypeModelList = await _itemTypeService.GetAll();
        StateHasChanged();
        IsEditingHeaderText = false;
    }

    private async Task StartEditingExistingSizes()
    {
        IsEditingExistingSize = true;
        await _jsRuntime.InvokeVoidAsync("focusInputText", ".input-for-focus-2");
    }

    private void StopEditingExistingSizes()
    {
        IsEditingExistingSize = false;
    }

    private async Task SaveEditingExistingSizes()
    {
        await _sizeService.Create(SizeModel, ShownTypeModel.ItemTypeId);
        await _itemTypeService.Update(ShownTypeModel);
        ShownTypeModel = await _itemTypeService.GetById(ShownTypeModel.ItemTypeId);
        ItemTypeModelList = await _itemTypeService.GetAll();
        SizeModel.ItemSize = "";
        SizeModel = await _sizeService.GetById(SizeModel.Id);
        StateHasChanged();
        IsEditingExistingSize = false;
    }
}
