@page "/wardrobe"
@inject IWardrobeService _wardrobeService
@inject IItemTypeService _itemTypeService

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container p-3 popup-container @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show popup-container--content" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <div class="toast-body popup-container--body">
            <img src="@ImageData()" class="input-container--image" />
        </div>
    </div>
</div>

<div class="header-container">
    <h2>Wardrobe Iventory</h2>
    <NavLink href="/wardrobe/create" style="float: right;">
        <button class="btn-form btn-form--submit btn-plus"></button>
    </NavLink>
</div>

<div class="menu-container">
    <input @bind-value="SearchedItem" placeholder="Search..." @onkeydown="SearchOnEnter" @bind-value:event="oninput"/>
    <button @onclick="SearchForItem"></button>
</div>

<div class="item-container">
    
    @if (WardrobeList.Any())
    {
        <div class="item-row item-row--info">
            <div class="item-property">Color</div>
            <div class="item-property">Item Type</div>
            <div class="item-property">Price</div>
            <div class="item-property">Image</div>
            <div class="item-action">Action</div>
        </div>
        @foreach (var item in WardrobeList)
        {
            <div class="item-row item-row--content">
                <div class="item-property">@item.Color</div>
                <div class="item-property">@item.ItemType.Model</div>
                <div class="item-property">@item.Price€</div>

                <div class="item-property">
                    @if (item.ImageData.Any()) {
                        <button class="item-property--button" @onclick="() => Show(item.WardrobeModelId)"></button>
                    }
                    else
                    {
                        <span>None</span>
                    }
                </div>

                <div class="item-action">
                    <NavLink href=@($"/wardrobe/create/{item.WardrobeModelId}")>
                        <button class="btn-form btn-form--submit" style="margin-right: 2px;">Edit</button>
                    </NavLink>
                    <button class="btn-form btn-form--cancel" style="margin-left: 2px;" @onclick="() => DeleteItem(item.WardrobeModelId)">Delete</button>
                </div>
            </div>
        }
    }
    else
    {
        if (IsLoading)
        {
            <div class="loadingio-spinner-blocks-49enh9aem">
                <div class="ldio-4kmgy2v2hm7">
                    <div style='left:25.919999999999998px;top:25.919999999999998px;animation-delay:0s'></div><div style='left:57.599999999999994px;top:25.919999999999998px;animation-delay:0.32894736842105265s'></div><div style='left:89.28px;top:25.919999999999998px;animation-delay:0.6578947368421053s'></div><div style='left:25.919999999999998px;top:57.599999999999994px;animation-delay:2.3026315789473686s'></div><div style='left:89.28px;top:57.599999999999994px;animation-delay:0.9868421052631579s'></div><div style='left:25.919999999999998px;top:89.28px;animation-delay:1.9736842105263157s'></div><div style='left:57.599999999999994px;top:89.28px;animation-delay:1.644736842105263s'></div><div style='left:89.28px;top:89.28px;animation-delay:1.3157894736842106s'></div>
                </div>
            </div>
        }
        else
        {
           <p>No Data found</p>
        }
    }
</div>

<style>
    body { background-color: #f3f3f3; }
</style>

@code {
    private IEnumerable<WardrobeDTO> WardrobeList { get; set; } = new List<WardrobeDTO>();
    private WardrobeDTO WardrobeItem { get; set; } = new WardrobeDTO();

    bool IsLoading { get; set; }
    private string SearchedItem { get; set; } = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadWardrobeList();
        }        
    }

    private async Task LoadWardrobeList()
    {
        IsLoading = true;
        StateHasChanged();
        WardrobeList = await _wardrobeService.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task DeleteItem(int id)
    {
        IsLoading = true;
        await _wardrobeService.Delete(id);
        await LoadWardrobeList();
        IsLoading = false;
    }

    private async Task SearchForItem()
    {
        IsLoading = true;
        WardrobeList = await Task.Run(() => _wardrobeService.SearchByText(SearchedItem));
        IsLoading = false;
    }

    private async Task SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchForItem();
        }
    }

    [Parameter]
    public bool IsVisible { get; set; } = false;

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    public async void Show(int id)
    {
        HeaderText = "Image";
        IsVisible = true;
        await LoadWardrobeItem(id);
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }

    private async Task LoadWardrobeItem(int id)
    {
        WardrobeItem = await _wardrobeService.GetById(id);
    }

    private string ImageData()
    {
        if (WardrobeItem.ImageData != null && WardrobeItem.ImageData.Length > 0)
        {
            var base64String = Convert.ToBase64String(WardrobeItem.ImageData);
            return $"data:image/jpeg;base64,{base64String}";
        }
        return "";
    }

    private async Task<string> GetItemTypeModel(int id)
    {
        var obj = await _itemTypeService.GetById(id);
        return obj.Model;
    }
}
