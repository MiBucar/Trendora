@page "/wardrobe"
@inject IApplicationUserService _appUserService
@inject IProductService _productService
@inject ICategoryService _itemTypeService
@inject IJSRuntime JSRuntime
@inject IImageService _imageService
@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container p-3 popup-container @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show popup-container--content" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <div class="toast-body popup-container--body">
            @if (ShowingProductImage)
            {
                <img src="@ImageData()" class="input-container--image" />
            }
            @if (ShowingProductPallete)
            {
                <div class="input-container--wrap" style="margin: 0px;">
                    @foreach (var color in WardrobeItem.Colors)
                    {
                        <div class="color-container" style="background-color: @color.ColorCode;"></div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<div class="wardrobe-main__container">
    <div class="wardrobe_content__container">
        <div class="wardrobe-title__container">
            <h3>Products Inventory</h3>
        </div>
    </div>
</div>

@if (!IsLoading)
{
    <div style="display: flex; justify-content: center;">
        <div class="menu-container">
            <div class="menu-container--tools">
                <div class="menu-container--content">
                    <_FilterComponent OnFilterApplied="HandleFilterApplied"></_FilterComponent>
                </div>
                <div class="menu-container--content">
                    <input @bind-value="SearchedItem" placeholder="Search..." @onkeydown="SearchOnEnterAsync" @bind-value:event="oninput" />
                    <button class="menu-container--search-button" @onclick="SearchForItemAsync"></button>
                </div>
            </div>            
            <div class="menu-container--content">
                <a href="/wardrobe/create" style="float: right;">
                    <button class="btn-form btn-form--submit btn-plus"></button>
                </a>
            </div>
        </div>
    </div>

    <div class="item-container">
        @if (WardrobeList.Any())
        {
            <div class="item-row item-row--info">
                <div class="item-container__property">Name</div>
                <div class="item-container__property category-class">Category</div>
                <div class="item-container__property">Price</div>
                <div class="item-container__property img-class">Image</div>
                <div class="item-container__property color-class">Available Colors</div>
                <div class="item-container__property">Action</div>
            </div>
            @foreach (var item in WardrobeList)
            {
                <div class="item-row item-row--content">
                    <div class="item-container__property name-class">@item.Name</div>
                    <div class="item-container__property category-class">@item.Category.Name</div>
                    <div class="item-container__property">@item.Price€</div>
                    <div class="item-container__property img-class">
                        @if (item.ImageData.Any())
                        {
                            <button class="item-container__property-button-image-picture" @onclick="() => ShowProductImageAsync(item.Id)"></button>
                        }
                        else
                        {
                            <span>None</span>
                        }
                    </div>
                    <div class="item-container__property color-class">
                        @if (item.Colors.Any())
                        {
                            <button class="item-container__property-button-image-pallete" @onclick="() => ShowProductColorsAsync(item.Id)"></button>

                        }
                        else
                        {
                            <span>None</span>
                        }
                    </div>
                    <div class="item-container__property">
                        <NavLink href=@($"/wardrobe/create/{item.Id}")>
                            <button class="btn-form btn-form--submit" style="margin-right: 2px;">Edit</button>
                        </NavLink>
                        @if (IsAdmin)
                        {
                            <button class="btn-form btn-form--cancel" @onclick="() => DeleteItemAsync(item.Id)">Delete</button>

                        }
                        else
                        {
                            <button class="btn-form btn-form--cancel">Delete</button>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            if (IsLoading)
            {
                <div class="loadingio-spinner-ripple-kzrhxmj307">
                    <div class="ldio-i6ylih2ekth">
                        <div></div><div></div>
                    </div>
                </div>
            }
            else
            {
                <p>No Data found</p>
            }
        }
    </div>
}
else
{
    <_LoadingAnimation/>
}


<style>
    body {
        background-color: #f3f3f3;
    }

    .btn-plus {
        background-image: url('Images/plus.png');
        background-repeat: no-repeat;
        background-position: center;
        background-size: 15px;
        margin-left: 5px;
        max-width: 4rem !important;
    }
</style>

@code {
    private IEnumerable<ProductDTO> WardrobeList { get; set; } = new List<ProductDTO>();
    private ProductDTO WardrobeItem { get; set; } = new ProductDTO();

    bool IsLoading { get; set; }
    private string SearchedItem { get; set; } = "";
    private bool ShowingProductImage { get; set; }
    private bool ShowingProductPallete { get; set; }
    private bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsAdmin = await _appUserService.IsUserAdmin();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadWardrobeListAsync();
        }
    }

    private async Task LoadWardrobeListAsync()
    {
        IsLoading = true;
        StateHasChanged();
        WardrobeList = await _productService.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task DeleteItemAsync(int id)
    {
        IsLoading = true;
        await _productService.Delete(id);
        await LoadWardrobeListAsync();
        IsLoading = false;
    }

    private async Task SearchForItemAsync()
    {
        IsLoading = true;
        WardrobeList = await Task.Run(() => _productService.SearchByText(SearchedItem));
        IsLoading = false;
    }

    private async Task SearchOnEnterAsync(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchForItemAsync();
        }
    }

    public async Task ShowProductColorsAsync(int id)
    {
        await LoadWardrobeItemAsync(id);
        HeaderText = "Colors";
        IsVisible = true;
        ShowingProductPallete = true;
        ShowingProductImage = false;
        StateHasChanged();
    }

    public async Task ShowProductImageAsync(int id)
    {
        await LoadWardrobeItemAsync(id);
        HeaderText = "Image";
        IsVisible = true;
        ShowingProductPallete = false;
        ShowingProductImage = true;
        StateHasChanged();
    }

    [Parameter]
    public bool IsVisible { get; set; } = false;

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    private void Close()
    {
        HeaderText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }

    private async Task LoadWardrobeItemAsync(int id)
    {
        WardrobeItem = await _productService.GetById(id);
    }

    private string ImageData()
    {
        return _imageService.GetImage(WardrobeItem.ImageData);
    }

    private void HandleFilterApplied(IEnumerable<ProductDTO> filteredList)
    {
        WardrobeList = filteredList;
        StateHasChanged();
    }
}
