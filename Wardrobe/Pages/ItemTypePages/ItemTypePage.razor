@page "/itemtypes"
@page "/itemtypes/edit/{Id:int}"
@inject IItemTypeService _itemTypeService
@inject ISizeService _sizeService
@inject IJSRuntime _jsRuntime

<h2 style="text-align:center">Create new Item Type</h2>

@if (IsVisible)
{
    <div class="toast-container p-3 popup-container" data-bs-autohide="true" data-bs-delay="5000" style="z-index: 10;">
        <div class="toast show popup-container__content" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <div style="display: flex; align-items: center;">
                    @if (!IsEditingHeaderText)
                    {
                        <h5 style="margin: 0;">@HeaderText</h5>
                        <div @onclick="StartEditingHeaderText" class="popup-container__edit-name"></div>

                        <div class="item-container__property-checkbox item-container__property-checkbox--small @(ShownTypeModel.IsClothing ? "item-container__property-checkbox--toggled" : "")" @onclick="() => ToggleCategoryCurrentItem(1)">
                            <label>Clothing</label>
                        </div>

                        <div class="item-container__property-checkbox item-container__property-checkbox--small @(ShownTypeModel.IsShoes ? "item-container__property-checkbox--toggled" : "")" @onclick="() => ToggleCategoryCurrentItem(2)">
                            <label>Shoes</label>
                        </div>

                        <div class="item-container__property-checkbox item-container__property-checkbox--small @(ShownTypeModel.IsAccessory ? "item-container__property-checkbox--toggled" : "")" @onclick="() => ToggleCategoryCurrentItem(3)">
                            <label>Accessory</label>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="ShownTypeModel" OnValidSubmit="SaveEditingHeaderText" @onfocusout="@(() => StopEditingHeaderText())">
                            <DataAnnotationsValidator />
                            <div class="item-property--card-1">
                                <input @bind-value="ShownTypeModel.Model" class="item-container__input no-focus-outline input-for-focus" style="width: 50%;" placeholder="Rename..."></input>
                            </div>
                            <ValidationMessage For="() => ShownTypeModel.Model" />
                        </EditForm>
                    }
                </div>
                <button type="button" class="btn-close" aria-label="Close" @onclick="ClosePopup"></button>
            </div>

            <div class="toast-body popup-container__body">
                @if (IsVisible)
                {
                    <div style="display: flex; align-items: center; flex-wrap: wrap;">
                        @foreach (var size in ShownTypeModel.Sizes)
                        {
                            <div class="size-container">
                                <span style="margin: 1px 3px 0px 2px;">@size.ItemSize</span>
                                <div @onclick="() => RemoveExistingSize(size)" class="size-container__image"></div>
                            </div>
                        }                        
                        @if (!IsEditingExistingSize)
                        {
                            <div class="size-container size-container--light">
                                <div @onclick="StartEditingExistingSizes" class="size-container__image--add"></div>
                            </div>
                        } else
                        {
                            <EditForm Model="ShownTypeModel" OnValidSubmit="SaveEditingExistingSizes" @onfocusout="@(() => StopEditingExistingSizes())">
                                <DataAnnotationsValidator />
                                    <input @bind-value="SizeModel.ItemSize" class="item-container__input no-focus-outline input-for-focus-2" placeholder="Add new Size" style="padding: 3px 5px 3px 5px; margin-right: 10px; margin-top: 5px; width: 54%;"></input>
                                <ValidationMessage For="() => ShownTypeModel.Model" />
                            </EditForm>
                        }
                    </div>                    
                }
            </div>
        </div>
    </div>
}


<div class="item-container--item-page">
    <!-- Create New Model Type -->
    <div class="item-container__card">
        <div style=" height: 100%;">
            <EditForm Model="ItemTypeModel" OnValidSubmit="@AddNewSize">
                <DataAnnotationsValidator />
                <div style="text-align:left;">
                    <label>Item Type Name</label>
                </div>
                <div class="item-container__property">
                    <InputText @bind-Value="ItemTypeModel.Model" class="item-container__input" placeholder="Enter new model type..."></InputText>
                </div>
                <ValidationMessage For="() => ItemTypeModel.Model" />
                <div style="text-align:left;">
                    <label>Item Type Size</label>
                </div>
                <div class="item-container__property">
                    <InputText @bind-Value="NewSizeValue" class="item-container__input" placeholder="Enter new size..."></InputText>
                    <button class="btn-form btn-form--submit btn-plus" style="margin-left: 5px;" type="submit"></button>
                </div>
                <!-- Checkboxes -->
                <div class="item-container__property">
                    <div class="item-container__property-checkbox @(ItemTypeModel.IsClothing ? "item-container__property-checkbox--toggled" : "")" @onclick="() => ToggleCategory(1)">
                        <label>Clothing</label>
                    </div>

                    <div class="item-container__property-checkbox @(ItemTypeModel.IsShoes ? "item-container__property-checkbox--toggled" : "")" @onclick="() => ToggleCategory(2)">
                        <label>Shoes</label>
                    </div>

                    <div class="item-container__property-checkbox @(ItemTypeModel.IsAccessory ? "item-container__property-checkbox--toggled" : "")" @onclick="() => ToggleCategory(3)">
                        <label>Accessory</label>
                    </div>                                       
                </div>
                <!-- Create Button -->
                <div style="text-align: left; width: 100%;">
                    <button @onclick="CreateItemType" type="button" class="btn-form btn-form--submit">Create</button>
                    @if (AvailableSizes.Any())
                    {
                        <button @onclick="@DeleteAvailableSizes" type="button" class="btn-form btn-form--cancel" style="margin-left: 5px;">Delete sizes</button>
                    }
                </div>
            </EditForm>
            @if (AvailableSizes.Any())
            {
                <h5 style="margin: 15px 0 5px 0">Created Sizes</h5>
                <div style="margin-top:10px; display: flex; align-items: center; flex-wrap: wrap;">
                    @foreach (var size in AvailableSizes)
                    {
                        <div class="size-container">
                            <span style="margin: 1px 3px 0px 2px;">@size.ItemSize</span>
                            <div @onclick="() => RemoveAvailableSize(size)" class="size-container__image"></div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
    <!-- List of Model Types -->
    <div class="item-container__card item-container__card--fixed-height">
        @if (ItemTypeModelList.Any())
        {
            <div class="item-container__row item-container__row--info">
                <div class="item-container__property" style="font-weight: 700;">Model Type</div>
                <div class="item-container__property">Sizes</div>
                <div class="item-container__property">Category</div>
                <div class="item-container__property">Action</div>
            </div>
            @foreach (var model in ItemTypeModelList)
            {
                <div class="item-container__row item-container__row--content">
                    <div class="item-container__property">@model.Model</div>
                    <div class="item-container__property">
                        @if (model.Sizes.Any())
                        {
                            if (model.Sizes.Count >= 4)
                            {
                                @for (int i = 0; i < 4; i++)
                                {
                                    <span style="margin-right: 5px;">@model.Sizes[i].ItemSize</span>
                                }
                                <span>...</span>
                            }
                            else
                            {
                                @foreach (var size in model.Sizes)
                                {
                                    <span style="margin-right: 5px;">@size.ItemSize</span>
                                }
                            }
                        }
                        else
                        {
                            <span>None</span>
                        }
                    </div>
                    <div class="item-container__property">
                        <div style="display: flex; flex-direction: column;">
                            @if (model.IsClothing || model.IsAccessory || model.IsShoes)
                            {
                                @if (model.IsClothing)
                                {
                                    <span>Clothing</span>
                                }
                                @if (model.IsAccessory)
                                {
                                    <span>Accessory</span>
                                }
                                @if (model.IsShoes)
                                {
                                    <span>Shoes</span>
                                }
                            }
                            else
                            {
                                <span>None</span>
                            }
                        </div>                        
                    </div>
                    <div class="item-container__property">
                        <button class="btn-form btn-form--submit" style="margin-right: 2px;" @onclick="() => ShowPopup(model.ItemTypeId)">Edit</button>
                        <button class="btn-form btn-form--cancel" style="margin-left: 2px;" @onclick="() => DeleteModel(model.ItemTypeId)">Delete</button>
                    </div>
                </div>

            }
        }
        else
        {
            if (IsLoading)
            {
                <div style="display: flex; justify-content: center; align-items: center; height: 100%;">
                    <div class="loadingio-spinner-blocks-49enh9aem">
                        <div class="ldio-4kmgy2v2hm7">
                            <div style='left:25.919999999999998px;top:25.919999999999998px;animation-delay:0s'></div><div style='left:57.599999999999994px;top:25.919999999999998px;animation-delay:0.32894736842105265s'></div><div style='left:89.28px;top:25.919999999999998px;animation-delay:0.6578947368421053s'></div><div style='left:25.919999999999998px;top:57.599999999999994px;animation-delay:2.3026315789473686s'></div><div style='left:89.28px;top:57.599999999999994px;animation-delay:0.9868421052631579s'></div><div style='left:25.919999999999998px;top:89.28px;animation-delay:1.9736842105263157s'></div><div style='left:57.599999999999994px;top:89.28px;animation-delay:1.644736842105263s'></div><div style='left:89.28px;top:89.28px;animation-delay:1.3157894736842106s'></div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div style="display: flex; justify-content: center; align-items: center; height: 100%;">
                    <p>Nothing to show</p>
                </div>
            }
        }
    </div>
</div>

<style>
    .no-focus-outline:focus{
        outline: none !important;
    }
</style>

@code {
    [Parameter]
    public int Id { get; set; }

    private bool IsLoading { get; set; }

    private ItemTypeDTO ItemTypeModel { get; set; } = new ItemTypeDTO();
    private ItemTypeDTO ShownTypeModel { get; set; } = new ItemTypeDTO();
    private SizeDTO SizeModel { get; set; } = new SizeDTO();
    private IEnumerable<ItemTypeDTO> ItemTypeModelList { get; set; } = new List<ItemTypeDTO>();
    private IEnumerable<SizeDTO> ItemSizeList { get; set; } = new List<SizeDTO>();

    private string NewSizeValue { get; set; } = "";
    private List<SizeDTO> AvailableSizes { get; set; } = new List<SizeDTO>() { };

    private void AddNewSize()
    {
        if (NewSizeValue.Length > 0)
        {
            AvailableSizes.Add(new SizeDTO() { ItemSize = NewSizeValue, IsAvailable = true });
        }
        NewSizeValue = "";
    }

    private void RemoveAvailableSize(SizeDTO sizeToRemove)
    {
        AvailableSizes.Remove(sizeToRemove);
    }

    private async Task RemoveExistingSize(SizeDTO sizeToRemove)
    {
        await _sizeService.Delete(sizeToRemove);
        ShownTypeModel = await _itemTypeService.GetById(ShownTypeModel.ItemTypeId);
        ItemTypeModelList = await _itemTypeService.GetAll();
        ItemSizeList = await _sizeService.GetAll();
        StateHasChanged();
    }

    private void DeleteAvailableSizes()
    {
        AvailableSizes = new List<SizeDTO>() { };
    }

    private void ToggleCategory(int type)
    {
        switch(type)
        {
            case 1:
                ItemTypeModel.IsClothing = !ItemTypeModel.IsClothing;
                break;
            case 2:
                ItemTypeModel.IsShoes = !ItemTypeModel.IsShoes;
                break;
            case 3:
                ItemTypeModel.IsAccessory = !ItemTypeModel.IsAccessory;
                break;
        }

    }

    private async Task ToggleCategoryCurrentItem(int type)
    {
        switch (type)
        {
            case 1:
                ShownTypeModel.IsClothing = !ShownTypeModel.IsClothing;
                break;
            case 2:
                ShownTypeModel.IsShoes = !ShownTypeModel.IsShoes;
                break;
            case 3:
                ShownTypeModel.IsAccessory = !ShownTypeModel.IsAccessory;
                break;
        }
        await _itemTypeService.Update(ShownTypeModel);
        ItemTypeModelList = await _itemTypeService.GetAll();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadItemTypes();
        }
    }

    private async Task LoadItemTypes()
    {
        IsLoading = true;
        StateHasChanged();
        ItemSizeList = await _sizeService.GetAll();
        ItemTypeModelList = await _itemTypeService.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task CreateItemType()
    {
        var newModel = await _itemTypeService.Create(ItemTypeModel);

        foreach (var size in AvailableSizes)
        {
            await _sizeService.Create(size, newModel.ItemTypeId);
        }

        AvailableSizes = new List<SizeDTO>();
        ItemTypeModelList = await _itemTypeService.GetAll();
        StateHasChanged();
        ItemTypeModel = new ItemTypeDTO();
    }

    private async Task DeleteModel(int id)
    {
        await _itemTypeService.Delete(id);
        await LoadItemTypes();
        StateHasChanged();
    }

    [Parameter]
    public bool IsVisible { get; set; } = false;

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    public async void ShowPopup(int id)
    {
        ShownTypeModel = await _itemTypeService.GetById(id);
        HeaderText = ShownTypeModel.Model;
        IsVisible = true;
        StateHasChanged();
    }

    private void ClosePopup()
    {
        HeaderText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }

    private bool IsEditingHeaderText = false;
    private bool IsEditingExistingSize = false;

    private async Task StartEditingHeaderText()
    {
        IsEditingHeaderText = true;
        await _jsRuntime.InvokeVoidAsync("focusInputText", ".input-for-focus");
    }

    private void StopEditingHeaderText()
    {
        IsEditingHeaderText = false;
    }

    private async Task SaveEditingHeaderText()
    {
        await _itemTypeService.Update(ShownTypeModel);
        HeaderText = ShownTypeModel.Model;
        ItemTypeModelList = await _itemTypeService.GetAll();
        StateHasChanged();
        IsEditingHeaderText = false;
    }

    private async Task StartEditingExistingSizes()
    {
        IsEditingExistingSize = true;
        await _jsRuntime.InvokeVoidAsync("focusInputText", ".input-for-focus-2");
    }

    private void StopEditingExistingSizes()
    {
        IsEditingExistingSize = false;
    }

    private async Task SaveEditingExistingSizes()
    {
        await _sizeService.Create(SizeModel, ShownTypeModel.ItemTypeId);
        await _itemTypeService.Update(ShownTypeModel);
        ShownTypeModel = await _itemTypeService.GetById(ShownTypeModel.ItemTypeId);
        ItemTypeModelList = await _itemTypeService.GetAll();
        SizeModel.ItemSize = "";
        SizeModel = await _sizeService.GetById(SizeModel.Id);
        StateHasChanged();
        IsEditingExistingSize = false;
    }
}
