@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> _UserManager
@inject SignInManager<ApplicationUser> _SignInManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject NavigationManager _NavigationManager
@inject IJSRuntime JSRuntime

@page "/identity/changepassword"

<div class="main-identity__container">
    <div class="identity__navigation">
            <_UserNavigation></_UserNavigation>
    </div>
    <div class="identity-container">
        <div class="identity__container-information">
            <EditForm Model="UserPassModel" OnValidSubmit="@Submit">
                <div style="margin-bottom: 10px;">
                    <h4 class="user-nav__heading">Change Password</h4>
                </div>
                <DataAnnotationsValidator />
                <div class="identity__container-block">
                    <div class="identity__container-title">
                        <RadzenText TagName="TagName.H3">Old Password</RadzenText>
                        <RadzenText Style="color:red;" TagName="TagName.H3">*</RadzenText>
                    </div>
                    <RadzenTextBox @bind-Value="UserPassModel.OldPassword" class="w-100" aria-label="Default TextBox" />
                    <ValidationMessage For="() => UserPassModel.OldPassword" />
                </div>
                <div class="identity__container-block">
                    <div class="identity__container-title">
                        <RadzenText TagName="TagName.H3">New Password</RadzenText>
                        <RadzenText Style="color:red;" TagName="TagName.H3">*</RadzenText>
                    </div>
                    <RadzenTextBox @bind-Value="UserPassModel.NewPassword" class="w-100" aria-label="Default TextBox" />
                    <ValidationMessage For="() => UserPassModel.NewPassword" />
                </div>
                <div class="identity__container-block">
                    <div class="identity__container-title">
                        <RadzenText TagName="TagName.H3">Confirm Password</RadzenText>
                        <RadzenText Style="color:red;" TagName="TagName.H3">*</RadzenText>
                    </div>
                    <RadzenTextBox @bind-Value="UserPassModel.ConfirmPassword" class="w-100" aria-label="Default TextBox" />
                    <ValidationMessage For="() => UserPassModel.ConfirmPassword" />
                </div>
                <button class="submit-button" typeof="submit">Submit</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private ApplicationUser? User { get; set; }
    private UserPasswordReset UserPassModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserPassModel = new UserPasswordReset();

        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState?.User;
        User = await _UserManager.FindByEmailAsync(user.Identity.Name);
    }

    private async Task Submit(){
        var addPasswordResult = await _UserManager.ChangePasswordAsync(User, UserPassModel.OldPassword, UserPassModel.NewPassword);
        if (!addPasswordResult.Succeeded)
        {
            string errorMsg = new string("");
            foreach (var error in addPasswordResult.Errors)
            {
                errorMsg += error.Description + "\n";
            }
            await JSRuntime.InvokeVoidAsync("showBanner", ".banner.error", errorMsg, "error");
        }
        else{            
            _NavigationManager.NavigateTo(_NavigationManager.Uri, forceLoad: true);
            await JSRuntime.InvokeVoidAsync("showBanner", ".banner.success", "Password Changed!", "success");
        }
        StateHasChanged();
    }
}
