@using Microsoft.AspNetCore.Identity
@inject IOrderService _orderService
@inject AuthenticationStateProvider _authState
@inject UserManager<ApplicationUser> _userManager
@inject NavigationManager _navigationManager

@page "/identity/orders"

@if (IsLoading){
    <_LoadingAnimation></_LoadingAnimation>
}
else{
    <div class="main-identity__container">
        <div class="identity__navigation">
            <_UserNavigation></_UserNavigation>
        </div>        
        <div class="identity__container">
            <div class="identity__container-information">
                @if (Orders.Any()){
                    <div class="item-row item-row--info">
                        <div class="item-container__property">Order ID</div>
                        <div class="item-container__property">Date</div>
                        <div class="item-container__property">Price</div>
                        <div class="item-container__property">Order Summary</div>
                    </div>
                    @foreach (var order in Orders)
                    {   
                        <div class="item-row item-row--content">
                            <div class="item-container__property">#@order.OrderInfo.Id</div>
                            <div class="item-container__property">@order.OrderInfo.OrderDate.ToString("dd.MM.yyyy")</div>
                            <div class="item-container__property">@order.OrderInfo.OrderTotal€</div>
                            <div class="item-container__property">
                                <button @onclick="(() => ViewOrderSummary(order.OrderInfo.Id))" class="view-order__button">View Order</button>
                            </div>
                        </div>                    
                    }
                }
                else
                {
                    <p>There have been no orders</p>
                }        
            </div>
        </div>
    </div>    
}

@code {
    private bool IsLoading { get; set; }

    private IEnumerable<OrderDTO> Orders { get; set; } = new List<OrderDTO>();
    private ApplicationUser? User { get; set; }

    protected override async Task OnInitializedAsync(){
        IsLoading = true;
        StateHasChanged();

        await GetUserAsync();

        Orders = await _orderService.GetAll(User.Id);

        IsLoading = false;
        StateHasChanged();
    }

    private async Task GetUserAsync(){
        var authorizationState = await _authState.GetAuthenticationStateAsync();
        var user = authorizationState.User;
        User = await _userManager.FindByEmailAsync(user.Identity.Name);
    }

    private void ViewOrderSummary(int id){
        _navigationManager.NavigateTo($"/identity/orders/{id}");
    }
}
