@inject ILocalStorageService _localStorage
@inject IShoppingCartService _shoppingCartService

<div class="cart-container">
    <div class="cart-container__image-container">
        <img class="cart-container__image" src="data:image/png;base64,@Convert.ToBase64String(Item.Product.ImageData)"
                alt="@Item.Product.Name" />
    </div>

    <div class="cart-container__information">
        <h3 class="cart-container__name">@Item.Product.Name</h3>
        <p class="cart-container__description">@Item.Product.Description</p>
        <p class="cart-container__description">@Item.Size</p>
        <button @onclick="() => RemoveItem(Item.ProductId)" class="cart-container__button">Delete</button>
    </div>

    <div class="cart-container__price">
        <div class="cart-container__count-container">
            <div class="tooltip-container image image-minus" @onclick="() => DecrementCart(Item.ProductId, Item.ProductPrice)"></div>
            <p style="margin: 0;">@Item.Count</p>
            <div class="tooltip-container image image-plus" @onclick="() => IncrementCart(Item.ProductId, Item.ProductPrice)"></div>
        </div>
        <p>@Item.ProductPrice €</p>
    </div>
</div>

@code {
    [Parameter]
    public ShoppingCartItem Item { get; set; }

    [Parameter]
    public EventCallback OnCartChanged { get; set; }

    private async void RemoveItem(int productId)
    {
        await _shoppingCartService.DeleteCart(productId);
        var test = await _localStorage.GetItemAsync<List<ShoppingCartItem>>(SD.ShoppingCart);
        await OnCartChanged.InvokeAsync();
    }

    private async Task IncrementCart(int productId, int productPrice)
    {
        await _shoppingCartService.IncrementCart(new()
        {
            Count = 1,
            ProductId = productId,
            ProductPrice = productPrice
        });
        await OnCartChanged.InvokeAsync();
    }

    private async Task DecrementCart(int productId, int productPrice)
    {
        await _shoppingCartService.DecrementCart(new()
            {
                Count = 1,
                ProductId = productId,
                ProductPrice = productPrice
            });
        await OnCartChanged.InvokeAsync();
    }
}
